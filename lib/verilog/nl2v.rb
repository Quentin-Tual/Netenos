module Verilog
  
  class Netlist2Verilog
    
    def initialize netlist
      @netlist = netlist
      @txt = Code.new
      @pdk = JSON.parse(File.read($PDK_JSON))
    end

    def print path="#{netlist.name}.v"
      comment
      module_decl
      ios_decl
      wire_decl
      comp_inst
      endmodule

      @txt.save_as(path)
    end

    def comment
      @txt << "/* Generated by Netenos */"
      @txt.newline
    end

    def module_decl 
      ios_list = @netlist.get_ports.collect(&:name).join(',')
      @txt << "module #{@netlist.name}(#{ios_list});"
      @txt.indent+=1
    end

    def ios_decl 
      @netlist.get_ports.each do |p|
        @txt << "#{p.direction}put #{p.name};"
      end
    end

    def wire_decl 
      wires = @netlist.wires
      wires.each do |w|
        @txt << "wire #{w.name};"
      end
    end

    def comp_inst
      @netlist.components.each do |comp|
        stdcell = comp.class.name.split('::').last.downcase
        instance_name = comp.name
        @txt << "#{stdcell} #{instance_name} ("
        @txt.indent+=1
        portmap_block(comp)
        @txt.indent-=1
        @txt << ');'
      end
    end

    def portmap_block comp
      stdcell = comp.class.name.split('::').last.downcase
      comp.get_inputs.each do |ip|
        ip_index = ip.name.delete_prefix('i').to_i
        ip_name = @pdk[stdcell]['inputs'][ip_index]
        @txt << ".#{ip_name}(#{ip.get_source.name}),"
      end

      comp.get_outputs.each do |op|
        if op.get_sinks.length > 1
          raise "Error: component output #{op.get_full_name} has more than one sink. It is unexpected in Verilog, this output port should only be connected to one Wire class object."
        end
        stdcell = comp.class.name.split('::').last.downcase
        op_index = op.name.delete_prefix('o').to_i
        op_name = @pdk[stdcell]['outputs'][op_index]
        @txt << ".#{op_name}(#{op.get_sinks.first.name})," # Only one sink being a wire, else an error is raised beforehand 
      end

      @txt.lines[-1].delete_suffix!(',') # remove ',' for the last port map line  
    end

    def endmodule
      @txt.indent-=1
      @txt << "endmodule"
    end

  end
  
end