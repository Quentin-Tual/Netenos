#! usr/bin/ruby

require 'optparse'
require_relative "../lib/netenos.rb"

# TESTS : 
require_relative "../tests/test_lib.rb"

$DEF_TEMP_PATH = "/tmp/netenos/"
$VERSION = "netenos 0.1.0b (Apr 2023)"

Dir.mkdir($DEF_TEMP_PATH) unless File.exists?($DEF_TEMP_PATH)

@options = {}

ARGV << '-h' if ARGV.empty?

OptionParser.new do |opts|

# ? : Use /tmp for certain use case ? Allow the persistence of the last netlist stored (more flexible and easy to use) ? Allow an interactive mode ? 

    opts.on("-v", "--verbose", "Show extra information.") do
        @options[:verbose] = true
    end

    opts.on("-V", "--version", "Show used program current version.") do
        @options[:version] = true
    end

    opts.on("-c", "--convert PATH_IN,FORMAT_OUT,[PATH_OUT]", Array, "Convert a given Netlist PATH_IN to FORMAT_OUT. The converted netlist is stored in PATH_OUT if specified, at PATH_IN if not.") do |passed_args|
        @options[:convert] = passed_args
    end

    opts.on("-s", "--show PATH", "Import the given Netlist and convert it to a .dot format (stored in /tmp). An xdot command is then launched displaying the .dot generated.") do |path|
        @options[:show] = path
    end

    opts.on("-g [PATH,GATE_NUMBER,INPUT_NUMBER,OUTPUT_NUMBER]", "--randgen [PATH,GATE_NUMBER,INPUT_NUMBER,OUTPUT_NUMBER]", Array, "Generates a random netlist according to parameters given in arguments (default: rand_circ,10,10,5,5). Stored as .enl format, may need conversion for further use.") do |randgen_args|
        @options[:randgen] = randgen_args
    end

    opts.on("-t PATH_IN,HT_TYPE,TRIG_SIG_NUMBER,[PATH_OUT]", "--tamper PATH_IN,HT_TYPE,TRIG_SIG_NUMBER,[PATH_OUT]", Array, "Inserts a Hardware Trojan of the given structure (HT_TYPE and TRIG_SIG_NUMBER) in the netlist pointed by PATH_IN (default : xor_and,4). If PATH_OUT is specified, the tampered netlist is stored there, else it is stored at PATH_IN.") do |tamper_param| 
        @options[:tamper] = tamper_param
    end

end.parse!

@obj = Netlist::Wrapper.new

if @options[:verbose]
    puts "Request registered :"
    @options.keys.each do |option|
        if @options[option].nil?
            puts "\t- #{option.to_s}" 
        else
            puts "\t- #{option.to_s} : #{@options[option]}" 
        end 
    end
end

if @options[:randgen]

    if @options[:verbose]
        puts "Random netlist generation, will be saved at \"#{@options[:randgen][0]}\""
    end

    informations = @obj.randgen @options[:randgen]
    if @options[:verbose]
        puts "To be generated netlist properties : "
        puts "\t- Components number : #{informations[1]}"
        puts "\t- Inputs number : #{informations[2]}"
        puts "\t- Outputs number : #{informations[3]}"
        puts "\t- Netlist critical path : #{informations[4]}"
    end

    @obj.store_def "#{@options[:randgen][0]}.enl"

    @obj.show
    # ? : Ajouter un affichage des stats réels de la netlist générée après coup ? Voir afficher que cela ? 
    # TODO : Would be better to print the informations about the netlist generated after generation
end

if @options[:version]
    puts $VERSION
end

if @options[:tamper]
    if @obj.netlist.nil?
        @obj.import @options[:tamper][0]
    end
    if @options[:verbose]
        puts "Tampering of netlist \"#{@options[:tamper][0]}\", using : \n\t- HT type : #{@options[:tamper][1]}\n\t- Number of trigger signals : #{@options[:tamper][2]}" 
        # if !@options[:tamper][3].nil?
        #     puts "Tampered netlist stored at #{@options[:tamper][3]}"
        # end
    end

    @obj.tamper @options[:tamper][1], @options[:tamper][2].to_i

    if @options[:tamper][3].nil?
        original_path = @obj.parse_path @options[:tamper][0]
        @options[:tamper][3] = original_path[:dir]+original_path[:filename]+"_tampered"+'.'+original_path[:ext]
    end

    if @options[:verbose]
        puts "Saving tampered netlist at #{@options[:tamper][3]}"
    end
    @obj.export @options[:tamper][3], original_path[:ext]
end 

if @options[:show]

    if @options[:verbose]
        puts "Importing netlist at : #{@options[:show]}"
    end

    @obj.import @options[:show]

    if @options[:verbose]
        puts "Openning netlist \"#{@options[:show]}\" graph visualization (xdot)." 
    end

    @obj.show #@options[:show]
end


if @options[:convert]

    if @options[:verbose]
        puts "Importing netlist at #{@options[:convert][0]}"
    end
    @obj.import @options[:convert][0]

    if @options[:convert][2].nil?
        parsed_path = @obj.parse_path @options[:convert][0]
        @options[:convert][2] = parsed_path[:dir]+parsed_path[:filename]+'.'+@options[:convert][1]
    end

    if @options[:verbose]
        puts "Exporting netlist at #{@options[:convert][2]}"
    end
    @obj.export @options[:convert][2], @options[:convert][1]

end